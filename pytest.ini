[pytest]
# Pytest configuration file

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum Python version
minversion = 3.8

# Command line options
addopts = 
    -ra
    --strict-markers
    --ignore=docs
    --ignore=deploy
    --ignore=frontend
    --ignore=desktop
    --ignore=examples
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --maxfail=10
    --tb=short
    --disable-warnings
    --import-mode=importlib

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    e2e: End-to-end tests for complete workflows
    load: Load and performance tests
    stress: Stress tests for system limits
    security: Security tests
    slow: Slow running tests (> 5 seconds)
    requires_redis: Tests that require Redis to be running
    requires_docker: Tests that require Docker to be available
    asyncio: Asynchronous tests using asyncio

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */frontend/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

# Output options
[tool:pytest]
console_output_style = progress
junit_family = xunit2

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning